-- =========================================
-- osahaneat database (mysql 8.0+)
-- fixed schema + seed (cate_id null + on delete set null)
-- =========================================

drop database if exists osahaneat;
create database osahaneat character set utf8mb4 collate utf8mb4_unicode_ci;
use osahaneat;

set foreign_key_checks = 0;

-- =========================
-- 1) roles
-- =========================
create table roles (
  id int auto_increment primary key,
  role_name varchar(50) not null,
  create_date timestamp default current_timestamp
);

-- =========================
-- 2) accounts
-- =========================
create table accounts (
  id int auto_increment primary key,
  user_name varchar(100) not null unique,
  password varchar(255) not null,
  create_date timestamp default current_timestamp,
  role_id int,
  foreign key (role_id) references roles(id)
    on delete set null
    on update cascade
);

-- =========================
-- 3) users (profile info)
-- =========================
create table users (
  id int auto_increment primary key,
  account_id int not null unique,
  fullname varchar(100),
  avatar text,
  phone varchar(20),
  address varchar(255),
  create_date timestamp default current_timestamp,
  foreign key (account_id) references accounts(id)
    on delete cascade
    on update cascade
);

-- =========================
-- 4) categories
-- =========================
create table categories (
  id int auto_increment primary key,
  name_cate varchar(100) not null,
  create_date timestamp default current_timestamp,
  constraint uq_categories_name unique (name_cate)
);

-- =========================
-- 5) restaurants
-- =========================
create table restaurants (
  id int auto_increment primary key,
  title varchar(255),
  subtitle varchar(255),
  description text,
  image text,
  is_freeship boolean default false,
  address varchar(255),
  open_date timestamp default current_timestamp,
  owner_account_id int null,
  index idx_rest_owner (owner_account_id),
  foreign key (owner_account_id) references accounts(id)
    on delete set null
    on update cascade
);

-- =========================
-- 6) foods
-- =========================
create table foods (
  id int auto_increment primary key,
  title varchar(255) not null,
  image text,
  time_ship varchar(20),
  price decimal(10,2) not null,
  cate_id int null,  -- cho phép null để dùng ON DELETE SET NULL
  foreign key (cate_id) references categories(id)
    on delete set null
    on update cascade
);

-- =========================
-- 7) menu_restaurant (food per restaurant)
-- =========================
create table menu_restaurant (
  res_id int not null,
  food_id int not null,
  create_date timestamp default current_timestamp,
  primary key (res_id, food_id),
  foreign key (res_id) references restaurants(id)
    on delete cascade
    on update cascade,
  foreign key (food_id) references foods(id)
    on delete cascade
    on update cascade
);

-- =========================
-- 8) orders
-- =========================
create table orders (
  id int auto_increment primary key,
  user_id int not null,
  res_id int not null,
  create_date timestamp default current_timestamp,
  total_price decimal(12,2) not null default 0.00,
  status int not null default 0,
  constraint ck_orders_status check (status in (0,1,2)),
  foreign key (user_id) references users(id)
    on delete cascade
    on update cascade,
  foreign key (res_id) references restaurants(id)
    on delete cascade
    on update cascade
);

-- =========================
-- 9) order_items
-- =========================
create table order_items (
  order_id int not null,
  food_id int not null,
  quantity int not null default 1,
  price decimal(12,2) not null default 0.00,
  primary key (order_id, food_id),
  constraint ck_order_items_qty check (quantity > 0),
  constraint ck_order_items_price check (price >= 0),
  foreign key (order_id) references orders(id)
    on delete cascade
    on update cascade,
  foreign key (food_id) references foods(id)
    on delete cascade
    on update cascade
);

-- =========================
-- 10) rating_food
-- =========================
create table rating_food (
  id int auto_increment primary key,
  user_id int not null,
  food_id int not null,
  content text,
  rate_point int not null,
  rating_food_date datetime default current_timestamp,
  constraint ck_rating_food_point check (rate_point between 1 and 5),
  foreign key (user_id) references users(id)
    on delete cascade
    on update cascade,
  foreign key (food_id) references foods(id)
    on delete cascade
    on update cascade
);

-- =========================
-- 11) rating_restaurant
-- =========================
create table rating_restaurant (
  id int auto_increment primary key,
  user_id int not null,
  res_id int not null,
  content text,
  rate_point int not null,
  rating_restaurant_date datetime default current_timestamp,
  constraint ck_rating_res_point check (rate_point between 1 and 5),
  foreign key (user_id) references users(id)
    on delete cascade
    on update cascade,
  foreign key (res_id) references restaurants(id)
    on delete cascade
    on update cascade
);

-- =========================
-- 12) images (soft relation, no fk)
-- =========================
create table images (
  id int auto_increment primary key,
  res_id int null,
  food_id int null,
  image text not null,
  create_date timestamp default current_timestamp,
  key idx_images_res_id (res_id),
  key idx_images_food_id (food_id)
);

set foreign_key_checks = 1;

-- =========================
-- 13) triggers for soft integrity on images
-- =========================
delimiter //

create trigger bi_images_validate
before insert on images
for each row
begin
  if (new.res_id is null and new.food_id is null)
     or (new.res_id is not null and new.food_id is not null) then
    signal sqlstate '45000'
      set message_text = 'exactly one of res_id or food_id must be set';
  end if;

  if new.res_id is not null and
     (select count(*) from restaurants where id = new.res_id) = 0 then
    signal sqlstate '45000'
      set message_text = 'invalid res_id: restaurant does not exist';
  end if;

  if new.food_id is not null and
     (select count(*) from foods where id = new.food_id) = 0 then
    signal sqlstate '45000'
      set message_text = 'invalid food_id: food does not exist';
  end if;
end//
  
create trigger bu_images_validate
before update on images
for each row
begin
  if (new.res_id is null and new.food_id is null)
     or (new.res_id is not null and new.food_id is not null) then
    signal sqlstate '45000'
      set message_text = 'exactly one of res_id or food_id must be set';
  end if;

  if new.res_id is not null and
     (select count(*) from restaurants where id = new.res_id) = 0 then
    signal sqlstate '45000'
      set message_text = 'invalid res_id: restaurant does not exist';
  end if;

  if new.food_id is not null and
     (select count(*) from foods where id = new.food_id) = 0 then
    signal sqlstate '45000'
      set message_text = 'invalid food_id: food does not exist';
  end if;
end//

create trigger ad_restaurants_cleanup
after delete on restaurants
for each row
begin
  delete from images where res_id = old.id;
end//

create trigger ad_foods_cleanup
after delete on foods
for each row
begin
  delete from images where food_id = old.id;
end//

create trigger au_restaurants_propagate_id
after update on restaurants
for each row
begin
  if new.id <> old.id then
    update images set res_id = new.id where res_id = old.id;
  end if;
end//

create trigger au_foods_propagate_id
after update on foods
for each row
begin
  if new.id <> old.id then
    update images set food_id = new.id where food_id = old.id;
  end if;
end//

delimiter ;

-- =========================
-- seed data
-- =========================
use osahaneat;

-- 1. roles
insert into roles (role_name) values 
('USER'),
('RESTAURANT_OWNER'),
('ADMIN');

-- 2. accounts  (dùng {noop} cho Spring Security test nhanh)
insert into accounts (user_name, password, role_id) values
('nguyenvana', '{noop}123456', 1),
('hoangminh', '{noop}123456', 2);

-- 3. users
insert into users (account_id, fullname, phone, address) values
(1, 'Nguyễn Văn A', '0901234567', '123 Trần Hưng Đạo, Q1, TP.HCM'),
(2, 'Hoàng Minh', '0912345678', '45 Nguyễn Trãi, Q5, TP.HCM');

-- 4. categories
insert into categories (name_cate) values
('Món nước'),
('Món Nhật');

-- 5. restaurants  (boolean dùng 1/0)
insert into restaurants (title, subtitle, description, image, is_freeship, address, owner_account_id) values
('Nhà hàng Phở Việt', 'Chuyên phở bò, phở gà', 'Phở chuẩn vị truyền thống Việt Nam', 'pho.jpg', 1, '25 Lê Lợi, Q1, TP.HCM', 2),
('Nhà hàng Sushi Tokyo', 'Ẩm thực Nhật Bản', 'Sushi tươi ngon nhập khẩu mỗi ngày', 'sushi.jpg', 0, '88 Lý Tự Trọng, Q1, TP.HCM', null);

-- 6. foods
insert into foods (title, image, time_ship, price, cate_id) values
('Phở bò đặc biệt', 'pho-bo.jpg', '20', 55000, 1),
('Phở gà xé', 'pho-ga.jpg', '15', 45000, 1),
('Sushi cá hồi', 'sushi-salmon.jpg', '25', 99000, 2),
('Sashimi tổng hợp', 'sashimi.jpg', '30', 149000, 2);

-- 7. menu_restaurant
insert into menu_restaurant (res_id, food_id) values
(1, 1),
(1, 2),
(2, 3),
(2, 4);

-- 8. orders  (0: processing, 1: completed, 2: cancelled)
insert into orders (user_id, res_id, create_date, total_price, status) values
(1, 1, now() - interval 3 day, 100000, 1),
(1, 2, now() - interval 1 day, 149000, 0),
(1, 2, now() - interval 10 day, 149000, 2);

-- 9. order_items
insert into order_items (order_id, food_id, quantity, price) values
(1, 1, 1, 55000),
(1, 2, 1, 45000),
(2, 3, 1, 99000),
(2, 4, 1, 50000),
(3, 4, 1, 149000);
