package com.example.case_study_module_4.service.impl;

import com.example.case_study_module_4.dto.CartItemDto;
import com.example.case_study_module_4.dto.CreateOrderDto;
import com.example.case_study_module_4.entity.Order;
import com.example.case_study_module_4.entity.OrderItem;
import com.example.case_study_module_4.repository.*;
import com.example.case_study_module_4.service.IOrderService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class OrderService implements IOrderService {

    private final IOrderRepository orderRepository;
    private final IFoodRepository foodRepository;
    private final IUserRepository userRepository;
    private final IRestaurantRepository restaurantRepository;

    @Override
    public List<Order> getOrdersByUser(Long userId) {
        return orderRepository.findByUserId(userId);
    }

    @Override
    @Transactional
    public Order createOrder(CreateOrderDto dto) {
        // 1Ô∏è‚É£ T√¨m user
        var user = userRepository.findById(dto.getUserId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // 2Ô∏è‚É£ T·∫°o order
        var restaurant = restaurantRepository.findById(dto.getRestaurantId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√† h√†ng"));

        Order order = new Order();
        order.setUser(user);
        order.setRestaurant(restaurant);
        order.setStatus(0); // 0 = ch·ªù x√°c nh·∫≠n
        order.setTotalPrice(BigDecimal.ZERO);

        // üïì Th√™m d√≤ng n√†y ƒë·ªÉ l∆∞u th·ªùi gian ƒë·∫∑t h√†ng
        order.setCreateDate(LocalDateTime.now());

        BigDecimal total = BigDecimal.ZERO;
        List<OrderItem> orderItems = new ArrayList<>();

        // 3Ô∏è‚É£ Duy·ªát c√°c m√≥n
        for (CartItemDto itemDto : dto.getItems()) {
            var food = foodRepository.findById(itemDto.getFoodId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn"));

            OrderItem orderItem = new OrderItem();
            orderItem.setOrder(order);
            orderItem.setFood(food);
            orderItem.setQuantity(itemDto.getQuantity());

            // L∆∞u subtotal t·ª´ng m√≥n (gi√° x s·ªë l∆∞·ª£ng)
            BigDecimal subtotal = BigDecimal.valueOf(food.getPrice())
                    .multiply(BigDecimal.valueOf(itemDto.getQuantity()))
                    .setScale(0, RoundingMode.HALF_UP); // l√†m tr√≤n v·ªÅ 0 ch·ªØ s·ªë th·∫≠p ph√¢n


            total = total.add(subtotal);

            orderItems.add(orderItem);
        }


        order.setItems(orderItems);
        order.setTotalPrice(total);

        return orderRepository.save(order);
    }


    @Override
    public Order getOrderById(Long orderId) {
        return orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + orderId));
    }


}
